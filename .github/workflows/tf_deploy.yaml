name: Terraform AWS Deploy

on:
  push:
    branches:
      - main
  
  workflow_dispatch:

jobs:
       
  deploy:
    name: Deploy Terraform
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      EKS_CLUSTER_NAME: techchallenge
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: sa-east-1

      - name: Terraform init
        run: terraform init

      - name: Terraform plan
        run: terraform plan

      - name: Terraform apply
        run: terraform apply -auto-approve

      - name: Install eksctl
        run: |
          ARCH=amd64
          PLATFORM=$(uname -s)_$ARCH
          curl -sLO "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz"
          curl -sL "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_checksums.txt" | grep $PLATFORM | sha256sum --check
          tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm eksctl_$PLATFORM.tar.gz
          sudo mv /tmp/eksctl /usr/local/bin

      - name: Update kube config, add aws-secrets-provider, add metrics-server and console access
        run: | 
          aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION
          kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
          kubectl apply -f https://s3.us-west-2.amazonaws.com/amazon-eks/docs/eks-console-full-access.yaml
          kubectl apply -f https://raw.githubusercontent.com/aws/secrets-store-csi-driver-provider-aws/main/deployment/aws-provider-installer.yaml

      - name: Adicionar Helm repo para o Secrets Store CSI Driver
        run: |
          helm repo add secrets-store-csi-driver https://kubernetes-sigs.github.io/secrets-store-csi-driver/charts || true
          helm repo update

      - name: Verificar se o AWS Secrets Manager provider já está instalado
        id: aws_provider_check
        run: |
          if helm list -n kube-system | grep -q 'csi-secrets-store'; then
            echo "::set-output name=exists::true"
          else
            echo "::set-output name=exists::false"
          fi

      - name: Instalar o AWS Secrets Manager provider se não estiver instalado
        if: steps.aws_provider_check.outputs.exists == 'false'
        run: |
          helm install csi-secrets-store secrets-store-csi-driver/secrets-store-csi-driver --set syncSecret.enabled=true --namespace kube-system

      - name: Verificar se a AWS Load Balancer Controller IAM Policy já foi criada
        id: aws_loadbalancercontroller_policy_check
        run: |
          if aws iam list-policies --query 'Policies[?PolicyName==`AWSLoadBalancerControllerIAMPolicy`].PolicyName' --output text | grep -q 'AWSLoadBalancerControllerIAMPolicy'; then
            echo "::set-output name=exists::true"
          else
            echo "::set-output name=exists::false"
          fi
      
      - name: Cria a policy, caso não esteja criada
        if: steps.aws_loadbalancercontroller_policy_check.outputs.exists == 'false'
        run: |
          curl -O https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.5.4/docs/install/iam_policy.json
          aws iam create-policy --policy-name AWSLoadBalancerControllerIAMPolicy --policy-document file://iam_policy.json
      
      - name: Verificar se já existe a Role AmazonEKSLoadBalancerControllerRole e cria se não existir
        run: |
          eksctl create iamserviceaccount \
          --cluster=$EKS_CLUSTER_NAME \
          --namespace=kube-system \
          --name=aws-load-balancer-controller \
          --role-name AmazonEKSLoadBalancerControllerRole \
          --attach-policy-arn=arn:aws:iam::$AWS_ACCOUNT_ID:policy/AWSLoadBalancerControllerIAMPolicy \
          --override-existing-serviceaccounts \
          --approve
          
      - name: Verificar se o AWS Load Balancer Controller já está instalado
        id: aws_loadbalancercontroller_check
        run: |
          if helm list -n kube-system | grep -q 'aws-load-balancer-controller'; then
            echo "::set-output name=exists::true"
          else
            echo "::set-output name=exists::false"
          fi

      - name: Instalar o AWS Load Balancer Controller se não estiver instalado
        if: steps.aws_loadbalancercontroller_check.outputs.exists == 'false'
        run: |
          helm repo add eks https://aws.github.io/eks-charts
          helm repo update eks
          helm install aws-load-balancer-controller eks/aws-load-balancer-controller -n kube-system --set clusterName=$EKS_CLUSTER_NAME --set serviceAccount.create=false --set aws-vpc-id=vpc-0c9f3f1383a787786 --set aws-region=sa-east-1 --set serviceAccount.name=aws-load-balancer-controller
          
      # - name: Aplicar Ingress e IRSA
      #   run: kubectl apply -f ingress-controller.yaml && kubectl apply -f irsa.yaml
